version: "3.8"

services:
  proxy:
    container_name: proxy
    image: traefik:latest
    restart: always
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certResolver=default
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.mongodb.address=:${MONGO_REPLICA_PORT}
      - --certificatesResolvers.default.acme.email=biniamdev@gmail.com
      - --certificatesResolvers.default.acme.storage=/ssl-certs/acme.json
      - --certificatesResolvers.default.acme.httpChallenge.entryPoint=web
      - --providers.docker.exposedByDefault=false
    ports:
      - "80:80"
      - "443:443"
      # remove port 8080 for production
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/ssl/:/ssl-certs/
    networks:
      - app_network

  # account:
  #   container_name: account
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.account.rule=Host(`account.qedron.com`)
  #   image: ghcr.io/biniamkiros/account:latest
  #   build:
  #     context: .
  #     dockerfile: ./apps/account/Dockerfile
  #     args:
  #       SKIP_ENV_VALIDATION: 1
  #       DATABASE_URL: file:./db.sqlite
  #       NEXTAUTH_SECRET: h"
  #       NEXTAUTH_URL: http://account.qedron.com
  #       DISCORD_CLIENT_ID: s
  #       DISCORD_CLIENT_SECRET: s
  #   environment:
  #     - SKIP_ENV_VALIDATION=1
  #     - DATABASE_URL=file:./db.sqlite
  #     - NEXTAUTH_SECRET=h"
  #     - NEXTAUTH_URL=http://account.qedron.com
  #     - DISCORD_CLIENT_ID=s
  #     - DISCORD_CLIENT_SECRET=s
  #   restart: always
  #   ports:
  #     - 3000:3000
  #   networks:
  #     - app_network
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy

  # web:
  #   container_name: web
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.web.rule=Host(`web.qedron.com`)
  #   image: ghcr.io/biniamkiros/web:latest
  #   build:
  #     context: .
  #     dockerfile: ./apps/web/Dockerfile
  #   restart: always
  #   ports:
  #     - 3001:3000
  #   networks:
  #     - app_network
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy

  # api:
  #   container_name: api
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.api.rule=Host(`api.qedron.com`)
  #   image: ghcr.io/biniamkiros/api:latest
  #   build:
  #     context: .
  #     dockerfile: ./apps/api/Dockerfile
  #   restart: always
  #   ports:
  #     - 3002:3001
  #   networks:
  #     - app_network
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy

  seleda:
    container_name: seleda
    labels:
      - traefik.enable=true
      - traefik.http.routers.seleda.rule=Host(`seleda.qedron.com`)
    image: ghcr.io/biniamkiros/seleda:latest
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: ./apps/seleda/Dockerfile
      args:
        SKIP_ENV_VALIDATION: 1
        NODE_ENV: production
        SELEDA_DATABASE_URL: ${SELEDA_DATABASE_URL}
        SELEDA_BOT_TOKEN: ${SELEDA_BOT_TOKEN}
        NEXTAUTH_SECRET: h
        NEXTAUTH_URL: http://auth.qedron.com
        DISCORD_CLIENT_ID: s
        DISCORD_CLIENT_SECRET: s
    environment:
      - SKIP_ENV_VALIDATION=1
      - NODE_ENV=production
      - NEXTAUTH_SECRET=h"
      - NEXTAUTH_URL=http://auth.qedron.com
      - DISCORD_CLIENT_ID=s
      - DISCORD_CLIENT_SECRET=s
      - SELEDA_BOT_TOKEN=${SELEDA_BOT_TOKEN}
      - SELEDA_DATABASE_URL=${SELEDA_DATABASE_URL}
      - SELEDA_CHAPA_KEY=${SELEDA_CHAPA_KEY}
      - SELEDA_CHAPA_SECRET_HASH=${SELEDA_CHAPA_SECRET_HASH}
    restart: always
    ports:
      - 3003:3000
    networks:
      - app_network
    depends_on:
      mongodb:
        condition: service_healthy

  # cms:
  #   container_name: cms
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.cms.rule=Host(`cms.qedron.com`)
  #   image: directus/directus:10.10.5
  #   ports:
  #     - 8055:8055
  #   volumes:
  #     - ./directus/uploads:/directus/uploads
  #     - ./directus/extensions:/directus/extensions
  #   environment:
  #     - KEY=${DIRECTUS_KEY}
  #     - SECRET=${DIRECTUS_SECRET}
  #     - DB_CLIENT="pg"
  #     - DB_HOST="postgresdb"
  #     - DB_PORT=${POSTGRES_PORT}
  #     - DB_DATABASE=${POSTGRES_DB}
  #     - DB_USER=${POSTGRES_USERNAME}
  #     - DB_PASSWORD=${POSTGRES_PASSWORD}
  #     - ADMIN_EMAIL=${DIRECTUS_ADMIN_EMAIL}
  #     - ADMIN_PASSWORD=${DIRECTUS_ADMIN_PASSWORD}

  #     # Make sure to set this in production
  #     # (see https://docs.directus.io/self-hosted/config-options#general)
  #     - PUBLIC_URL="https://cms.qedron.com"
  #   # Environment variables can also be defined in a file (for example `.env`):
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     postgresdb:
  #         condition: service_healthy
  #   networks:
  #   - app_network

  # monk:
  #   container_name: monk
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.monk.rule=Host(`monk.qedron.com`)
  #   restart: unless-stopped
  #   image: listmonk/listmonk:latest
  #   ports:
  #     - "9000:9000"
  #   env_file:
  #     - ./.env
  #   environment:
  #     - LISTMONK_app__address=${LISTMONK_app__address}
  #     - LISTMONK_app__admin_username=${LISTMONK_app__admin_username}
  #     - LISTMONK_app__admin_password=${LISTMONK_app__admin_password}
  #     - LISTMONK_db__host=${POSTGRES_HOST}
  #     - LISTMONK_db__port=5432
  #     - LISTMONK_db__user=${POSTGRES_USERNAME}
  #     - LISTMONK_db__password=${POSTGRES_PASSWORD}
  #     - LISTMONK_db__database=${POSTGRES_DB}
  #     - LISTMONK_db__ssl_mode=${LISTMONK_db__ssl_mode}
  #   command: [sh, -c, "echo y | ./listmonk  --install --idempotent  --config='' && ./listmonk"]
  #   volumes:
  #     - ./listmonk/uploads:/listmonk/uploads
  #     # - ./listmonk/config.toml/:/listmonk/config.toml
  #   depends_on:
  #     postgresdb:
  #         condition: service_healthy

  #   networks:
  #     - app_network

  # cron:
  #   container_name: cron
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.cron.rule=Host(`cron.qedron.com`)
  #   image: alseambusher/crontab-ui
  #   env_file:
  #     - ./.env
  #   environment:
  #     - BASIC_AUTH_USER=${CRON_BASIC_AUTH_USER}
  #     - BASIC_AUTH_PWD=${CRON_BASIC_AUTH_PWD}
  #     - CRON_DB_PATH=${CRON_DB_PATH}
  #   volumes:
  #     - ./cron/cron.d:/etc/crontabs
  #   restart: always
  #   ports:
  #     - 8000:8000
  #   networks:
  #     - app_network

  # mailserver:
  #   container_name: mailserver
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.mailserver.rule=Host(`mail.qedron.com`)
  #   image: ghcr.io/docker-mailserver/docker-mailserver:latest
  #   # Provide the FQDN of your mail server here (Your DNS MX record should point to this value)
  #   hostname: mail.qedron.com
  #   env_file: mailserver.env
  #   # More information about the mail-server ports:
  #   # https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/
  #   ports:
  #     - "25:25"    # SMTP  (explicit TLS => STARTTLS, Authentication is DISABLED => use port 465/587 instead)
  #     - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
  #     - "465:465"  # ESMTP (implicit TLS)
  #     - "587:587"  # ESMTP (explicit TLS => STARTTLS)
  #     - "993:993"  # IMAP4 (implicit TLS)
  #   volumes:
  #     - ./mail/docker-data/dms/mail-data/:/var/mail/
  #     - ./mail/docker-data/dms/mail-state/:/var/mail-state/
  #     - ./mail/docker-data/dms/mail-logs/:/var/log/mail/
  #     - ./mail/docker-data/dms/config/:/tmp/docker-mailserver/
  #     - /etc/localtime:/etc/localtime:ro
  #   restart: always
  #   stop_grace_period: 1m
  #   # Uncomment if using `ENABLE_FAIL2BAN=1`:
  #   # cap_add:
  #   #   - NET_ADMIN
  #   healthcheck:
  #     test: "ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"
  #     timeout: 3s
  #     retries: 0
  #   networks:
  #     - app_network

  mongodb:
    container_name: mongodb
    labels:
      - traefik.enable=true
      - traefik.http.routers.mongodb.rule=Host(`mongo.qedron.com`)
      # - traefik.tcp.routers.mongodb.entrypoints=mongodb
      # - traefik.tcp.routers.mongodb.service=mongodb
      # - traefic.tcp.routers.mongodb.tls=true
      # - traefik.tcp.routers.mongodb.tls.certresolver=letsencrypt
      # - traefik.tcp.services.mongodb.loadBalancer.server.port=${MONGO_REPLICA_PORT}
    env_file:
      - ./.env
    build:
      context: .
      dockerfile_inline: |
        FROM mongo:7
        RUN openssl rand -base64 756 > /etc/mongo-keyfile 
        RUN chmod 400 /etc/mongo-keyfile 
        RUN chown mongodb:mongodb /etc/mongo-keyfile
    environment:
      MONGO_REPLICA_HOST: mongo.qedron.com
      MONGO_REPLICA_PORT: ${MONGO_REPLICA_PORT}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "${MONGO_REPLICA_PORT}:${MONGO_REPLICA_PORT}"
    volumes:
      - ./mongodb-data:/data/db
    restart: unless-stopped
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port ${MONGO_REPLICA_PORT}
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'127.0.0.1:${MONGO_REPLICA_PORT}'}]}) }" | mongosh --port ${MONGO_REPLICA_PORT} -u ${MONGO_USERNAME} -p ${MONGO_PASSWORD} --authenticationDatabase admin
      # interval: 5s
      # timeout: 15s
      # start_period: 15s
      # retries: 10
      interval: 5s
      timeout: 2s
      retries: 20
    networks:
      - app_network

  postgresdb:
    container_name: postgresdb
    labels:
      - traefik.enable=true
      - traefik.http.routers.postgresdb.rule=Host(`postgres.qedron.com`)
    image: postgres:latest
    # user: postgres
    ports:
      - "5432:5432"
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGUSER=${POSTGRES_USERNAME}
    restart: always
    volumes:
      - ./postgresdb-data:/var/lib/postgresql/data
    healthcheck:
      test:
        # ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DB}"]
        [
          "CMD",
          "psql",
          "-U",
          "${POSTGRES_USERNAME}",
          "-d",
          "${POSTGRES_DB}",
          "-c",
          "SELECT 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  occ:
    container_name: occ
    labels:
      - traefik.enable=true
      - traefik.http.routers.occ.rule=Host(`occ.qedron.com`)
      - traefik.http.routers.occ.service=occ-service
      - traefik.http.services.occ-service.loadbalancer.server.port=8082

      - traefik.http.routers.tracking.entrypoints=web
      - traefik.http.routers.tracking.rule=Host(`occ.qedron.com`)
      - traefik.http.routers.tracking.service=tracking-service
      - traefik.http.services.tracking-service.loadbalancer.server.port=5000-5150

      - traefik.http.routers.trackingudp.entrypoints=web
      - traefik.http.routers.trackingudp.rule=Host(`occ.qedron.com`)
      - traefik.http.routers.trackingudp.service=trackingudp-service
      - traefik.http.services.trackingudp-service.loadbalancer.server.port=5000-5150/udp
    image: ghcr.io/biniamkiros/occ:latest
    build:
      context: .
      dockerfile: ./packages/traccar/Dockerfile
    ports:
      - "8082:8082"
      - "5000-5150:5000-5150"
      - "5000-5150:5000-5150/udp"
    restart: always
    networks:
      - app_network
    depends_on:
      postgresdb:
        condition: service_healthy

  # monitoring:
  #   image: nicolargo/glances:latest-full
  #   pid: host
  #   network_mode: host
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /run/user/1000/podman/podman.sock:/run/user/1000/podman/podman.sock
  #   environment:
  #     - "GLANCES_OPT=-w"

  # netdata:
  #   image: netdata/netdata
  #   container_name: netdata
  #   ports:
  #     - 19999:19999
  #   restart: unless-stopped
  #   cap_add:
  #     - SYS_PTRACE
  #   security_opt:
  #     - apparmor:unconfined
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  app_network:
    external: true
# volumes:
#   mongodb-data: {}
