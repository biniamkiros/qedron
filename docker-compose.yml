version: "3"

services:
  proxy:
    container_name: proxy
    image: ghcr.io/biniamkiros/proxy:latest
    build:
      context: .
      dockerfile: ./packages/reverse-proxy/Dockerfile
      args:
        PROXY_VERSION: latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
      # - "27019:27019"
      # remove port 8080 for production
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/ssl/:/ssl-certs/
    networks:
      - app_network

  web:
    container_name: web
    labels:
      - traefik.enable=true
      - traefik.http.routers.web.rule=Host(`web.qedron.com`)
    image: ghcr.io/biniamkiros/web:latest
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    restart: always
    ports:
      - 3000:3000
    networks:
      - app_network
    depends_on:
      - mongodb
     
  api:
    container_name: api
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.qedron.com`)
    image: ghcr.io/biniamkiros/api:latest
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    restart: always
    ports:
      - 3001:3001
    networks:
      - app_network
    depends_on:
      - mongodb
   
  seleda:
    container_name: seleda
    labels:
      - traefik.enable=true
      - traefik.http.routers.seleda.rule=Host(`seleda.qedron.com`)
    image: ghcr.io/biniamkiros/seleda:latest
    build:
      context: .
      dockerfile: ./apps/seleda/Dockerfile
      args:
        SKIP_ENV_VALIDATION: 1
        DATABASE_URL: file:./db.sqlite
        NEXTAUTH_SECRET: h"
        NEXTAUTH_URL: http://auth.qedron.com
        DISCORD_CLIENT_ID: s
        DISCORD_CLIENT_SECRET: s
    environment:
      - SKIP_ENV_VALIDATION=1
      - DATABASE_URL=file:./db.sqlite
      - NEXTAUTH_SECRET=h"
      - NEXTAUTH_URL=http://auth.qedron.com
      - DISCORD_CLIENT_ID=s
      - DISCORD_CLIENT_SECRET=s
    restart: always
    ports:
      - 3002:3000
    networks:
      - app_network
    depends_on:
      - mongodb

  cron:
    container_name: cron
    labels:
      - traefik.enable=true
      - traefik.http.routers.cron.rule=Host(`cron.qedron.com`)        
    image: alseambusher/crontab-ui 
    env_file:
      - ./.env 
    environment:
      - BASIC_AUTH_USER=${BASIC_AUTH_USER} 
      - BASIC_AUTH_PWD=${BASIC_AUTH_PWD}
      - CRON_DB_PATH=${CRON_DB_PATH}
    volumes:
      - /cron/cron.d:/etc/crontabs
    restart: always
    ports:
      - 8000:8000  
    networks:
      - app_network

  cms:
    container_name: cms
    image: strapi:latest
    labels:
      - traefik.enable=true
      - traefik.docker.network=app_network
      - traefik.http.routers.mongodb.rule=Host(`cms.qedron.com`)    
      # - traefik.tcp.routers.mongodb.entrypoints=mongodb
      # - traefik.tcp.routers.mongodb.service=mongodb
      # - traefic.tcp.routers.mongodb.tls=true
      # - traefik.tcp.routers.mongodb.tls.certresolver=letsencrypt
      # - traefik.tcp.services.mongodb.loadBalancer.server.port=27016
    env_file:
      - ./.env 
    environment:
      DATABASE_CLIENT: mongo
      DATABASE_NAME: strapi
      DATABASE_HOST: mongodb
      DATABASE_PORT: ${MONGO_REPLICA_PORT}
      DATABASE_USERNAME: ${MONGO_USERNAME}
      DATABASE_PASSWORD: ${MONGO_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
    # volumes:
    #   - ./config:/opt/app/config
    #   - ./src:/opt/app/src
    #   - ./package.json:/opt/package.json
    #   - ./yarn.lock:/opt/yarn.lock
    #   - ./.env:/opt/app/.env
    #   - ./public/uploads:/opt/app/public/uploads
    volumes:
      - ./app:/srv/app
    ports:
      - '2337:1337'
    depends_on:
      - mongodb
  # -> only used for manual testing locally
  # This config is for MongoDB v5+
  # It's a Replica Set (required for Prisma Client)
  mongodb:
    container_name: mongodb
    labels:
      - traefik.enable=true
      - traefik.docker.network=app_network
      - traefik.http.routers.mongodb.rule=Host(`db.qedron.com`)    
      # - traefik.tcp.routers.mongodb.entrypoints=mongodb
      # - traefik.tcp.routers.mongodb.service=mongodb
      # - traefic.tcp.routers.mongodb.tls=true
      # - traefik.tcp.routers.mongodb.tls.certresolver=letsencrypt
      # - traefik.tcp.services.mongodb.loadBalancer.server.port=27016
    image: ghcr.io/biniamkiros/mongodb:latest
    env_file:
      - ./.env 
    build:
      context: .
      dockerfile: ./packages/mongodb_replica/Dockerfile
      args:
        MONGO_VERSION: 6
    environment:
      MONGO_REPLICA_HOST: db.qedron.com
      MONGO_REPLICA_PORT: ${MONGO_REPLICA_PORT}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: auth
      # MONGOD_PID: 5
      # Use "mongo" instead of "mongosh" before v5.0
      MONGO_COMMAND: 'mongosh'
    ports:
      - '${MONGO_REPLICA_PORT}:${MONGO_REPLICA_PORT}'
    volumes:
     - ./dbdata:/data/db
    restart: unless-stopped
    healthcheck:
      # Use "mongo" instead of "mongosh" before v5.0
      test: ['CMD', 'mongosh', 'admin', '--port', '27019', '--eval', "db.adminCommand('ping').ok"]
      interval: 5s
      timeout: 2s
      retries: 20
    networks:
      - app_network

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  app_network:
    external: true
